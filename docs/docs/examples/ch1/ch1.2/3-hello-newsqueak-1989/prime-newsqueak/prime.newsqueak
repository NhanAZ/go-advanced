    // xuất 1 chuỗi số int từ 2 vào channel
    counter := prog(c:chan of int) {
        i := 2;
        for(;;) {
            c <-= i++;
        }
    };
    
    // Đối với chuỗi thu được từ channel listen, lọc ra các số là bội số của số nguyên tố
    // gửi kết quả cho channel send
    filter := prog(prime:int, listen, send:chan of int) {
        i:int;
        for(;;) {
            if((i = <-listen)%prime) {
                send <-= i;
            }
        }
    };
    
    // chức năng chính
    // Dòng đầu tiên của mỗi channel phải là số nguyên tố
    // sau đó xây dựng sàng nguyên tố  dựa trên số nguyên tố mới này
    sieve := prog() of chan of int {
        c := mk(chan of int);
        begin counter(c);
        prime := mk(chan of int);
        begin prog(){
            p:int;
            newc:chan of int;
            for(;;){
                prime <-= p =<- c;
                newc = mk();
                begin filter(p, c, newc);
                c = newc;
            }
        }();
        become prime;
    };
    
    // kết quả là các số nguyên tố còn lại trên sàng
    prime := sieve();